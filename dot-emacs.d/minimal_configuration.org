#+TITLE: Emacs minimal configuration

This is the minimal Emacs configuration that I use (typically with
=-nw=) for quickly looking up things in the terminal.

When ready, tangle this file with
=~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el= using (=C-c C-v t=
which is bound to =org-babel-tangle=). This file is then managed using
[[https://www.gnu.org/software/stow/][gnu stow]] and hyperlinked to =~/.emacs.d/minimal.el.=

*Note:* this is also loaded at the beginning of the complete
 configuration described in =Emacs_complete_configuration.org=

* Startup

These are self-explanatory: hide startup message.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
(setq initial-scratch-message nil)
#+END_SRC

* User Interface

Improve the window title with =*= for modified buffers, =@= for remote buffers
(e.g., over =tramp=), and remove a bunch of stuff (bell, tool-bar,
menus).

I always want line and column numbers.

And I am currently using the =wombat= theme, which is part of the
default Emacs.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(setq frame-title-format '("Emacs %@ %*" (:eval (if (buffer-name)(abbreviate-file-name (buffer-name)) "%b %*"))))
(setq ring-bell-function 'ignore)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode 0)
(set-fringe-mode 0)
(column-number-mode)
(global-display-line-numbers-mode t)
(load-theme 'wombat t)
(set-default 'truncate-lines t)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(set-default 'size-indication-mode t)
#+END_SRC


* Append folder when two buffers have the same name
#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

* Remove trailing white spaces when saving

Except for markdown.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(add-hook 'before-save-hook (lambda()
                              (when (not (or (derived-mode-p 'markdown-mode)))
                                (delete-trailing-whitespace))))
#+END_SRC

* Buffer navigation

Use shift + arrows to change buffer, this conflicts with =org-mode=
defaults which are unset in the complete configuration (since I use
the GUI with org mode usually).

Use =C-pgUp/Pgdown= to cycle buffers.

Finally, to kill the current buffer I use =M-super-k=.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(when (fboundp 'windmove-default-keybindings)
   (windmove-default-keybindings))

(global-set-key (kbd "C-<prior>") 'previous-buffer)
(global-set-key (kbd "C-<next>") 'next-buffer)
(global-set-key (kbd "M-s-k") 'kill-current-buffer)
 #+END_SRC

 Prefer to reuse existing windows, especially those showing a buffer
 of the same mode
#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(setq display-buffer-base-action
  '((display-buffer-reuse-window
     display-buffer-reuse-mode-window
     display-buffer-same-window
     display-buffer-in-previous-window)))
 #+END_SRC
* Basic parenthesis handling

Colorizing of parenthesis is loaded in the complete
configuration. Since it requires packages and I want this config to be
usable with a brand new install I split the parenthesis handling
configuration between here and there.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)
#+END_SRC

* Open certain files in given mode

  =dot-*= files in =shell-script-mode=

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(add-to-list 'auto-mode-alist '("/\.bash[^/]*$" . shell-script-mode))
(add-to-list 'auto-mode-alist '("/dot-bash[^/]*$" . shell-script-mode))
(add-to-list 'auto-mode-alist '("/\.zsh[^/]*$" . shell-script-mode))
(add-to-list 'auto-mode-alist '("/dot-zsh[^/]*$" . shell-script-mode))
#+END_SRC

   configuration files in =conf-mode=

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(add-to-list 'auto-mode-alist '("/rc[^/]*$" . conf-mode))
(add-to-list 'auto-mode-alist '("/\.par[^/]*$" . conf-mode))
#+END_SRC

* Some custom keybindings
** Zoom in/out
 Zoom-in and out all the buffers with =C-+= and =C--= (why the extra =x= in the defaults when
 these are available?). Per buffer zoom in/out can be achieved with the
 defaults =C-x C-+= and =C-x C--=.

 #+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
   (defun zoom-in ()
     (interactive)
     (let ((x (+ (face-attribute 'default :height)
		 10)))
       (set-face-attribute 'default nil :height x)))

   (defun zoom-out ()
     (interactive)
     (let ((x (- (face-attribute 'default :height)
		 10)))
       (set-face-attribute 'default nil :height x)))

   (defun zoom-set-default ()
     (interactive)
     (set-face-attribute 'default nil :height 110))

   (define-key global-map (kbd "C-+") 'zoom-in)
   (define-key global-map (kbd "C--") 'zoom-out)
   (define-key global-map (kbd "C-0") 'zoom-set-default)
 #+END_SRC

** =Esc= quits prompts

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Indent on new line

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
 (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Search & replace

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
 (define-key global-map (kbd "M-s-c") 'replace-string)
#+END_SRC

** Revert buffer

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
  (global-set-key (kbd "<f5>")
                (lambda ()
                  (interactive)
                  (revert-buffer :ignore-auto)))
#+END_SRC

** Use =ibuffer= instead of =list-buffers=
#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

* Garbage collection and hidden files in =/tmp=

Allow up to 25Mb of garbage before collecting, and put temporary files
where they belong, i.e. =/tmp=, wich I mount on my RAM.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(setq gc-cons-threshold 25000000)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* Follow symlinks

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
(setq vc-follow-symlinks t)
#+END_SRC

* Auto-revert files on change

#+BEGIN_SRC  emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC

* MESA related stuff

I often handle [[http://mesa.sourceforge.net/][MESA]] related files on remote machines in =-nw= mode, and
so I have muscle memory for that. These settings would fit better in
the complete configuration, but I want them here because of this.

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/minimal.el
    (add-to-list 'load-path "~/.emacs.d/emacs_tools/mesa-major-mode/")
    (require 'mesa-mode)
    (require 'run-star-extras)
    (setq mesa-default-version "r24.08.1")
    (setq mesa-version-mesa-dir "~/Documents/Research/codes/mesa/mesa-24.08.01/")
    (setq mesa-mode-enforce-formatting-default t)


    (add-to-list 'auto-mode-alist '("/run_star_extras.f90$" . (lambda () (f90-mode) (run-star-extras-minor-mode))))
    (add-to-list 'auto-mode-alist '("/run_binary_extras.f90$" . (lambda () (f90-mode) (run-star-extras-minor-mode))))
    (add-to-list 'auto-mode-alist '("/inlist[^/]*$" . mesa-mode))
    (add-to-list 'auto-mode-alist '("\\.defaults$" . (lambda () (mesa-mode) (f90-mode) (view-mode))))
    (add-to-list 'auto-mode-alist '("\\.inc$" . (lambda () (f90-mode) (view-mode))))

    ;; ;; hide show mode configuration
    (add-hook 'f90-mode-hook
	      (lambda()
		(local-set-key (kbd "\M-ss") 'hs-show-block)
		(local-set-key (kbd "\M-sh") 'hs-hide-block)
		(hs-minor-mode t)))
#+END_SRC
