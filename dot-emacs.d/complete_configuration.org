#+TITLE: Emacs complete configuration
#+PROPERTIES: header-args:emacs-lisp :mkdirp yes
#+STARTUP: overview

When ready, tangle this file with
=~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el= using (=C-c C-v t=
which is bound to =org-babel-tangle=). This file is then managed using
[[https://www.gnu.org/software/stow/][gnu stow]] and hyperlinked to [[~/.emacs.d/init.el][~/.emacs.d/init.el]].

* Minimal configuration

For quick lookup of things (typically using =emacs -nw=) I only load a
minimal configuration. This is defined in [[./minimal_configuration.org][minimal_configuration.org]]
which is tangled to [[~/.emacs.d/minimal.el][minimal.el]].

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(load "~/.emacs.d/minimal.el")
#+END_SRC


* Start in server mode

To minimize the impact of startup time (which is anyway short, 1.27
sec on my machine), I run emacs in daemon mode: start a server in the
background and keep on re-using it. See also [[file:README.org][here]] for my command line
setup to have a smooth workflow.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(server-start)
#+END_SRC


* Initialize packages

Define a list of packages I use, and install them if they are not
already. For clarity, this leaves in a separate [[file:install_packages.el][install_packages.el]]
that I load.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(load "~/.emacs.d/install_packages.el")
#+END_SRC

The above can be a little slow the first time. If you prefer
installing packages manually, comment the line above and just use the
lines below instead (note that the block below is not tangled to
[[~/.emacs.d/init.el][~/.emacs.d/init.el]]).

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ;; ("org"   . "https://orgmode.org/elpa/")
			   ("elpa"  . "https://elpa.gnu.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/"))
	                   ("org-contrib" . "https://elpa.nongnu.org/nongnu/"))

  (package-initialize)
#+END_SRC


[[https://github.com/jwiegley/use-package][use-package]] is used to have a clean configuration for individual packages.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(require 'use-package)
#+END_SRC


* Packages I use

 I use ivy as completion framework for the minibuffer, and company for
 pop up suggestions.

** Avoid creating tons of hidden files

   [[https://github.com/emacscollective/no-littering][no-littering]] to avoid creating too many hidden files.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package no-littering)
#+END_SRC


** Language server protocol and =eglot=

  I am using [[https://github.com/joaotavora/eglot][eglot]] for language server protocol needs, mostly in
  Fortran 90 (using [[https://fortls.fortran-lang.org/][fortls]]) and python (using [[https://pypi.org/project/python-language-server/][python language server]] -  =pip install
  python-lsp-server=)

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  ;; eglot
  (use-package eglot :ensure t)
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "/usr/bin/clangd-10"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-to-list 'eglot-server-programs '(f90-mode . ("fortls" "--notify_init" "--nthreads=2")))
  (add-hook 'f90-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
#+END_SRC


** In buffer autocompletion with company

  I use [[https://company-mode.github.io/][company]] for autocompletion

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (setq company-minimum-prefix-length 1) ;; start at first characted
  (setq company-idle-delay 0)            ;; no time delay
  (setq company-selection-wrap-around t) ;; wrap around suggestion list
  (company-tng-configure-default)        ;; tab cycles through suggestions
#+END_SRC


** Autocompletion of minibuffer: Ivy

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (use-package ivy
   :diminish
   :bind (("C-s" . swiper)
	  ;; :map ivy-minibuffer-map
	  ;; ("TAB" . ivy-alt-done)
	  ;; ("C-l" . ivy-alt-done)
	  ;; ("C-j" . ivy-next-line)
	  ;; ("C-k" . ivy-previous-line)
	  ;; :map ivy-switch-buffer-map
	  ;; ("C-k" . ivy-previous-line)
	  ;; ("C-l" . ivy-done)
	  ;; ("C-d" . ivy-switch-buffer-kill)
	  ;; :map ivy-reverse-i-search-map
	  ;; ("C-k" . ivy-previous-line)
	  ;; ("C-d" . ivy-reverse-i-search-kill)
	  )
   :config
   (ivy-mode 1))

   (use-package ivy-rich
     :init
     (ivy-rich-mode 1)
     ;; :config
     ;; (setq ivy-format-function #'ivy-format-function-line)
     ;; (setq ivy-rich--display-transformers-list
     ;; 	(plist-put ivy-rich--display-transformers-list
     ;; 		   'ivy-switch-buffer
     ;; 		   '(:columns
     ;; 		     ((ivy-rich-candidate (:width 40))
     ;; 		      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
     ;; 		      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
     ;; 		      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
     ;; 		      ; return file path relative to project root or `default-directory' if project is nil
     ;; 		      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
     ;; 		     :predicate
     ;; 		     (lambda (cand)
     ;; 		       (if-let ((buffer (get-buffer cand)))
     ;; 			   ;; Don't mess with EXWM buffers
     ;; 			   (with-current-buffer buffer
     ;; 			     (not (derived-mode-p 'exwm-mode))))))))
     )
#+END_SRC


** Icons for dired and doom-modeline

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

This might require running =M-x all-the-icons-install-fonts= the first
time you use it.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package all-the-icons)
#+END_SRC


** Dired file manager

   Show icons in the dired file manager with [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]].
   Reuse the same buffer for dired, instead of opening one per folder
   (not working right now). Also, set it up so it updates when files
   change in a directory

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))
  (setq global-auto-revert-non-file-buffers t)
  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC


** Bottom line

 See [[https://github.com/seagle0128/doom-modeline][doom-modeline]]. Using daemon mode the icons are not loaded by
 default, so if using daemon mode (=daemonp= is true) add a hook to set
 =doom-modeline-icon t=.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package doom-modeline
  :ensure t
  :custom ((doom-modeline-height 10))
  :init (doom-modeline-mode 1))
(setq doom-modeline-icon t)
#+END_SRC


** Parenthesis handling

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
;; these are configured in minimal.el
;; (electric-pair-mode 1)
;; (setq electric-pair-preserve-balance nil)
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC


** Suggestions for key bindings

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC


** LaTeX related stuff

*** Spell checking

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(dolist (hook '(text-mode-hook LaTeX-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(setq flyspell-sort-corrections nil)
(setq flyspell-issue-message-flag nil)
#+END_SRC

*** References handling

Fist use reftex

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package reftex
  :ensure auctex
  :after latex)
#+END_SRC


#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTex-mode-hook 'flyspell-mode)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-default-bibliography '("~/Documents/Research/Biblio_papers/bibtex/master_bibtex.bib"))
  ;; (setq reftex-default-bibliography '("~/Documents/Research/Biblio_papers/bibtex/zotero.bib"))
  ;(setq reftex-bibpath-environment-variables '("~/Documents/Research/Biblio_papers/bibtex/master_bibtex.bib")
#+END_SRC

*** No line breaks in math mode

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (add-to-list 'fill-nobreak-predicate 'texmathp)))
#+END_SRC

*** Okular forward/reverse search

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (load "~/.emacs.d/emacs_tools/okular-latex.el")
  (require 'okular-search "~/.emacs.d/emacs_tools/okular-search.el")
#+END_SRC


** Org mode related stuff

I unbind Shift+arrows from org mode, as I use these for navigating
buffers (see =minimal.el=). I also want org-mode to start with inline
images. And I configure several different kind of notes for =org-capture=.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (use-package org
    :pin elpa
    :config
    (define-key org-mode-map (kbd "<S-left>") nil)
    (define-key org-mode-map (kbd "<S-right>") nil)
    (define-key org-mode-map (kbd "<S-down>") nil)
    (define-key org-mode-map (kbd "<S-up>") nil)
    (setq org-ellipsis " ▾ ")
    (setq org-startup-with-inline-images t)
    (setq org-pretty-entities t)
    (setq org-pretty-entities-include-sub-superscripts t)
    (setq org-use-sub-superscripts "{}")
    (setq org-image-actual-width 400)
    (setq org-hide-emphasis-markers t)
    (setq org-startup-folded t)
    ;; capture templates
    (setq org-capture-templates
	  '(("n" "Research note" entry
	     (file+headline "~/Documents/Research/Todos.org" "Research notes")
	     "* %?\n %T")
	    ("p" "Personal note" entry
	     (file+headline "~/Documents/Mathieu/Todos.org" "Personal notes")
	     "* %?\n %T")
	    ("i" "Future project idea" entry
	     (file "~/Documents/Research/Projects/ideas.org")
	     "* %?\n %T")
	    ("j" "Job applications idea" entry
	     (file+headline "~/Documents/Research/Applications/Notes.org" "Application related notes")
	     "* %?\n %T")
	    ("f" "FLASH and PPISN" entry
	     (file+headline "~/Documents/Research/Projects/PP/FLASH/FLASH_notes.org" "FLASH and PPISN notes")
	     "* %?\n %T")
	    ("r" "Random throwaway" entry
	     (file+headline "/tmp/Random_notes.org" "Random throughaway notes")
	     "* %?\n %T")
	    ))
    )
#+END_SRC

Unbind Shift+arrows from org-agenda too.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package org-agenda
   :config
   (define-key org-agenda-mode-map (kbd "<S-left>") nil)
   (define-key org-agenda-mode-map (kbd "<S-right>") nil)
   (define-key org-agenda-mode-map (kbd "<S-down>") nil)
   (define-key org-agenda-mode-map (kbd "<S-up>") nil)
)
#+END_SRC

*** Nicer bullets and other eye-candy

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "●" "○" "●" "○" "●" "○")))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  ;; (visual-fill-column-mode 1)
  )

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+END_SRC

*** Pasting images in the org files with org-download

    This allows to paste screenshots in emacs org mode. Pasting from the
    clipboard requires to install =wl-paste= which is usually available in
    your OS package manager (e.g., apt). To paste a screenshot from the
    clipboard use =M-x org-download-screenshot=. This will open your OS
    screenshot utility, you can then take the screenshot -- but what you
    want to capture has to be visible on your screen when you type that command.

    I configure this so that the image file is saved in a hidden folder
    =.org_notes_figures= in the same location of the org file the image is
    being pasted in. When moving/sharing the org file, remember to move or
    share that hidden folder content too.

    I also use =M-x customize-group org-download= to change the value of
    =org-download-screenshot-method=. By default this is set to
    =gnome-screenshot= and it opens the screenshot tool from within
    emacs, this means you need to already have on screen what you want
    to screenshot, go in emacs and type =M-x org-download-screenshot=
    and then back to what you actually want to capture, which might
    have disappeared behind some other window or pane.

    Instead, I use =M-x customize-group= to set
    =org-download-screenshot-method= to =xclip -selection clipboard -t
    image/png -o > %s"= With this I can take a screenshot from outside
    of emacs and then use =M-x org-download-screenshot= to paste it.
    This adds a line in the =~/.emacs= file.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (use-package org-download
    :config
    (setq-default org-download-image-dir ".org_notes_figures/")
    (fmakunbound 'org-download-clipboard)
    )

#+END_SRC

*** org-roam

(Not used)
#+BEGIN_SRC emacs-lisp
   ;; (use-package org-roam
   ;;     :config
   ;;     (org-roam-db-autosync-mode)
   ;; )
#+END_SRC



** =yaml-mode= and =snakemake-mode=

   yaml files in =yaml-mode= and snakefile in =snakemake-mode=. I use
   these mostly with [[https://github.com/showyourwork/showyourwork][showyourwork]].

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
    (add-to-list 'auto-mode-alist '("/\.yaml[^/]*$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("/\.yml[^/]*$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("/Snakefile[^/]*$" . snakemake-mode))
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC


** Python

*** elpy

 #+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
   (use-package elpy
     :ensure t
     :init
     (elpy-enable)
     (setq elpy-rpc-python-command "python"))
   (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
 #+END_SRC

 # To avoid the following error:

 # #+BEGIN_SRC emacs-lisp
 #    Elpy is creating the RPC virtualenv (’/home/math/.emacs.d/elpy/rpc-venv’)
 #    error in process sentinel: elpy-rpc--default-error-callback: peculiar error: "exited abnormally with code 1"
 #    error in process sentinel: peculiar error: "exited abnormally with code 1"
 #    Elpy is creating the RPC virtualenv (’/home/math/.emacs.d/elpy/rpc-venv’)
 # #+END_SRC

 # Customize the variable =Elpy Rpc Virtualenv Path= with =M-x
 # customize-variable elpy-rpc-python-command= and set it to =current=.

*** Formatting

 Use [[https://pypi.org/project/black/][black]] to format code

 #+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
   ;; Install:
   ;; pip install black
   ;; pip install black-macchiato
   (use-package python-black
     :demand t
     :after python
     :custom
     (python-black-extra-args '("--line-length=120" "--skip-string-normalization"))
     (setq python-black-command "~/.local/bin/black")
     (setq python-black-macchiato-command "~/.local/bin/black-macchiato")
     :bind
     (:map python-mode-map
       ("C-c C-l" . python-black-partial-dwim)))
 #+END_SRC


*** Flycheck completion


 #+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
 (when (require 'flycheck nil t)
   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
   (add-hook 'elpy-mode-hook 'flycheck-mode))
 #+END_SRC


*** Jupyter notebooks with ein

  [[https://github.com/millejoh/emacs-ipython-notebook][This package]] allows to run ipython/jupyter notebooks within emacs. It
  works for remote notebooks too.

 #+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
   ; ein
   (setq ein:worksheet-enable-undo t)
   (setq ein:output-area-inlined-images t)
 #+END_SRC

**** Latex in markdown ein cells

     To render latex text in markdown cells, install =nodejs= and =npm=

     #+BEGIN_SRC bash
       $ sudo apt install nodejs npm
     #+END_SRC

     Then install [[https://gitlab.com/matsievskiysv/math-preview][math-preview]] and make sure it is in the =PATH=:

     #+BEGIN_SRC bash
       $ sudo npm install -g git+https://gitlab.com/matsievskiysv/math-preview
     #+END_SRC

     Finally, use math-preview

     #+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
       ; to see latex in ein markdown cells
       (use-package math-preview)
     #+END_SRC

     Running =C-c C-c= (bound to =ein:worksheet-execute-cell=) on a
     =markdown= cell will now try to render latex at the cursor position.


** =arXiv-mode=

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package arxiv-mode
    :ensure t
    :config
    (setq arxiv-default-category "astro-ph")

    (defun mr/arxiv-show-abstract ()
        "Show the abstract window and display appropriate information."
	(unless (buffer-live-p arxiv-abstract-buffer)
	(setq arxiv-abstract-buffer (get-buffer-create "*arXiv-abstract*")))
	(with-current-buffer arxiv-abstract-buffer (arxiv-abstract-mode)
	(visual-line-mode) ;; added
	(setq-local prettify-symbols-alist arxiv-abstract-prettify-symbols-alist)
	(prettify-symbols-mode 1)
	(arxiv-format-abstract-page (nth arxiv-current-entry arxiv-entry-list)))
	(unless (window-live-p arxiv-abstract-window)
	(setq arxiv-abstract-window (display-buffer
        "*arXiv-abstract*"t))))

    (advice-add 'arxiv-show-abstract :override #'mr/arxiv-show-abstract)

;     (defun mr/arxiv-next-entry (&optional arg)
;   "Move to the next arXiv entry.
; With ARG, move to the next nth entry."
;   (interactive "P")
;   (setq arxiv-current-entry (+ arxiv-current-entry (prefix-numeric-value arg)))
;   (let ((len (- (safe-length arxiv-entry-list) 1)))
;     (when (>= arxiv-current-entry len)
;       (if (eq arxiv-query-results-max arxiv-query-total-results)
; 	  (when (> arxiv-current-entry len)
; 	    (setq arxiv-current-entry (- (safe-length arxiv-entry-list) 1))
; 	    (message "end of search results"))
; 	(arxiv-show-next-page))
;   (goto-char (point-min))
;   (forward-line (* 4 arxiv-current-entry))
;   (move-overlay arxiv-highlight-overlay
; 		(point) (progn (beginning-of-line 5) (point)))
;   (forward-line (- 4))
;   (let ((abstract-buffer (get-buffer "*arXiv-abstract*")))
;     (if abstract-buffer
; 	(switch-to-buffer abstract-buffer)
;       (let ((split-height-threshold nil)
; 	    (split-width-threshold 0)
; 	    (new-buffer (generate-new-buffer "*arXiv-abstract*")))
; 	(split-window-below)
; 	(other-window 1)
; 	(switch-to-buffer new-buffer)
; 	(arxiv-mode)
; 	(arxiv-show-abstract)))))

	; (advice-add 'arxiv-next-entry :override #'mr/arxiv-next-entry)
)
#+END_SRC


** editor config

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC


** multiple cursors

 Trying [[https://github.com/magnars/multiple-cursors.el][multiple cursors]]. I want to drop a cursor at point with =<f1>=
 (after activating =multiple-cursors-mode= with =M-s-return=)

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (use-package multiple-cursors
    :ensure t
    :config
    (defun mc/toggle-cursor-at-point ()
	"Add or remove a cursor at point."
	(interactive)
	(if multiple-cursors-mode
	    (message "Cannot toggle cursor at point while `multiple-cursors-mode' is active.")
	  (let ((existing (mc/fake-cursor-at-point)))
	    (if existing
		(mc/remove-fake-cursor existing)
	      (mc/create-fake-cursor-at-point)))))

      (add-to-list 'mc/cmds-to-run-once 'mc/toggle-cursor-at-point)
      (add-to-list 'mc/cmds-to-run-once 'multiple-cursors-mode)
    (define-key mc/keymap (kbd "<return>") nil)
	  (global-set-key (kbd "<f1>") 'mc/toggle-cursor-at-point)
      (global-set-key (kbd "<M-s-return>") 'multiple-cursors-mode)
      (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click))
#+END_SRC


** magit LFS

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package magit-lfs
     :ensure t
     :pin melpa)
#+END_SRC



** Fontawesome

 [[https://github.com/emacsorphanage/fontawesome][This]] package allows to use the fontawesome icons. Requires this fix
 on my machine for fontawesome 5.

#+BEGIN_SRC  emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(set-fontset-font "fontset-default" '(#xf000 . #xf23a) "FontAwesome")
#+END_SRC

** Autosave

#+BEGIN_SRC  emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+END_SRC


* Spell checking with multiple languages

  I took this from [[https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html][here]], but I configure Italian, French, and English
  (US and GB). First you want to install the =hunspell= dictionaries
  with:

#+BEGIN_SRC bash
apt install hunspell hunspell-it hunspell-fr hunspell-en-us hunspell-en-gb
#+END_SRC

  Then configure =ispell= to use this

#+BEGIN_SRC  emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  (with-eval-after-load "ispell"
    ;; Configure `LANG`, otherwise ispell.el cannot find a 'default
    ;; dictionary' even though multiple dictionaries will be configured
    ;; in next line.
    (setenv "LANG" "en_US.UTF-8")
    (setq ispell-program-name "hunspell")
    ;; Configure two variants of English, French and Italian
    (setq ispell-dictionary "en_US,en_GB,fr_FR,it_IT")
    ;; ispell-set-spellchecker-params has to be called
    ;; before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US,en_GB,fr_FR,it_IT")
    ;; For saving words to the personal dictionary, don't infer it from
    ;; the locale
    (setq ispell-personal-dictionary "~/.emacs.d/emacs_tools/hunspell_personal"))
#+END_SRC

The personal dictionary file has to exist, otherwise hunspell will
silently not use it. However, the lines below make =--daemon= crash.
For now I manually make sure the file exists.

#+BEGIN_SRC  emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  ;; (unless (file-exists-p ispell-personal-dictionary)
  ;; (write-region " " nil ispell-personal-dictionary nil 0))
#+END_SRC


* Single space for end-of-sentence

#+BEGIN_SRC  emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(setq sentence-end-double-space nil)
#+END_SRC


* De-duplicate lines in buffer

#+BEGIN_SRC emacs-lisp :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
   (defun uniquify-all-lines-region (start end)
     "Find duplicate lines in region START to END keeping first occurrence."
     (interactive "*r")
     (save-excursion
       (let ((end (copy-marker end)))
         (while
             (progn
               (goto-char start)
               (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
           (replace-match "\\1\n\\2")))))

   (defun uniquify-all-lines-buffer ()
     "Delete duplicate lines in buffer and keep first occurrence."
     (interactive "*")
     (uniquify-all-lines-region (point-min) (point-max)))
#+END_SRC


* Configure recent files handling

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
  ;; Recent buffers in a new Emacs session
  (use-package recentf
    :config
    (setq recentf-auto-cleanup 'never)
    (setq recentf-max-menu-items 50)
    (setq recentf-max-saved-items 250)
    (recentf-mode t)
    (global-set-key "\M-[" 'recentf-open-files)
    :diminish nil)
#+END_SRC


* Customized keybindings

** org-mode related

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cr" 'org-capture)
(define-key global-map "\C-ctl" 'org-todo-list)
#+END_SRC


** jump to last line of a given column

This is useful sometimes when looking up large data files.
The way I obtained this is a bit convoluted.

#+BEGIN_SRC  emacs-lisp :tangle no
  ;; to define macro with user interaction
  (defun my-macro-query (arg)
    "Prompt for input using minibuffer during kbd macro execution.
   With prefix argument, allows you to select what prompt string to use.
   If the input is non-empty, it is inserted at point."
    (interactive "P")
    (let* ((query (lambda () (kbd-macro-query t)))
	   (prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
	   (input (unwind-protect
		      (progn
			(add-hook 'minibuffer-setup-hook query)
			(read-from-minibuffer prompt))
		    (remove-hook 'minibuffer-setup-hook query))))
      (unless (string= "" input) (insert input))))

  (global-set-key "\C-xQ" 'my-macro-query)
  ;; see http://www.emacswiki.org/emacs/KeyboardMacros#toc4 to have an idea of how I came up with this solution
#+END_SRC

Using the macro query above, I defined a way to jump.

#+BEGIN_SRC emacs-lisp  :tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el
(defun go-to-column (column)
  (interactive "Column number: ")
  (move-to-column column t))
(global-set-key (kbd "M-g TAB") 'go-to-column)

(fset 'last-line-which-col
      "\C-[>\C-[OA\C-a\C-[g\C-i\C-u\C-xq[OB")

(put 'last-line-which-col 'kmacro t)

(global-set-key (kbd "C-c C-l") 'last-line-which-col)
#+END_SRC



* Ongoing development

When ready tangle to =:tangle ~/Documents/dotfiles/emacs_mathren/dot-emacs.d/init.el=

** emails in emacs with =mu4e=

Follow emacs-from-scratch's [[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Mail-01.org][notes]] or videos to setup =mu= and =mbsync/isync=.
For now I have managed to setup my private email, but =mu4e= installed
from ubuntu repositories is old and yields an error.

*** TODO update =mu4e= from source

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
  :ensure nil
  ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  ;; (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  ;; (setq mu4e-update-interval (* 10 60))
  ;; (setq mu4e-get-mail-command "mbsync -a")
  ;; (setq mu4e-maildir "~/Mail")

  ;; (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  ;; (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  ;; (setq mu4e-refile-folder "/[Gmail]/All Mail")
  ;; (setq mu4e-trash-folder  "/[Gmail]/Trash")

  ;; (setq mu4e-maildir-shortcuts
  ;;     '(("/mathren90_Inbox"   . ?i)
  ;;       ("/[Gmail]/Sent Mail" . ?s)
  ;;       ("/[Gmail]/Trash"     . ?t)
  ;;       ("/[Gmail]/Drafts"    . ?d)
  ;;       ("/[Gmail]/All Mail"  . ?a)))
  )
#+END_SRC

** multiple-cursors

  Fix function to drop cursors
